# (c) 2012-2017, Ansible
#
# This file is part of Ansible Galaxy
#
# Ansible Galaxy is free software: you can redistribute it and/or modify
# it under the terms of the Apache License as published by
# the Apache Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# Ansible Galaxy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Apache License for more details.
#
# You should have received a copy of the Apache License
# along with Galaxy.  If not, see <http://www.apache.org/licenses/>.

from galaxy.common import testing

from django.test import TestCase


@testing.resolve_templated_tests
class TestingTest(TestCase):

    options = ['a', 'b']

    # test generator is applied on class, so every provider must be accessible
    # from class fields, because at this stage instance does not exists yet
    @classmethod
    def get_other_options(self):
        return ['c', 'd']

    @classmethod
    def setUpClass(cls):
        super(TestingTest, cls).setUpClass()
        cls.num_templated_calls = 0
        cls.templated_args = []

    @testing.template_with_data_provider("options", name="arg1")
    @testing.template_with_data_provider("get_other_options", name="arg2")
    def _test_template_accepts_class_field_names(self, arg1, arg2):
        self.num_templated_calls += 1
        self.templated_args.append(arg1 + arg2)
        assert arg1 in self.options
        assert arg2 in self.get_other_options()

        if self.num_templated_calls == 4:
            assert self.templated_args == ['ac', 'ad', 'bc', 'bd']

    @testing.template_with_data_provider(lambda: [1], name="arg1")
    def _test_template_accepts_functions(self, arg1):
        assert arg1 == 1

    @testing.template_with_data_provider([1], name="arg1")
    def _test_template_accepts_array(self, arg1):
        assert arg1 == 1

    def test_cases_are_autogenerated(self):
        assert hasattr(self, "test_accepts_class_field_names_0")
        assert hasattr(self, "test_accepts_class_field_names_1")
        assert hasattr(self, "test_accepts_class_field_names_2")
        assert hasattr(self, "test_accepts_class_field_names_3")
        assert hasattr(self, "test_accepts_functions_0")
        assert hasattr(self, "test_accepts_array_0")

    def test_templates_are_removed(self):
        assert not hasattr(self, "_test_template_accepts_class_field_names")
        assert not hasattr(self, "_test_template_accepts_functions")
        assert not hasattr(self, "_test_template_accepts_array")
